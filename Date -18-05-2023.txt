3 sum closest   
class Solution
{
    static int closest3Sum(int A[], int N, int X)
    {
        Arrays.sort(A);
        int min = Integer.MAX_VALUE;
        int ans =-1;
        for(int i =0;i<N;i++){
            int j = i+1;
            int k = N-1;
            int target = X-A[i];
            while(j<k){
                int sum = A[j]+A[k];
                int diff = Math.abs(sum+A[i]-X);
                if(diff<min){
                    min = diff;
                    ans = sum+A[i];
                }
                if(sum<target)j++;
                else k--;
            }
        }
        return ans;
    }
}
      

Lucky Ishaan  Input:
arr[ ] = {123, 42, 45, 78, 12345}
Output : 3
Explanation:
sum_id of Ticket 1: 1+2+3 = 6 (claimed)
sum_id of Ticket 2: 4+2 = 6 (can't be claimed since Ticket 1, with same sum_id has already been claimed)
sum_id of Ticket 3: 4+5 = 9 (claimed),
sum_id of Ticket 4: 7+8 = 15 (claimed),
sum_id of Ticket 5: 1+2+3+4+5 = 15
(can't be claimed since Ticket 4 with the same sum_id has already been claimed)  


  
class Complete {
    // Function for finding maximum and value pair
    public static int lucky(long arr[], int n) {
        long num = 0;
         Map<Long, Long> frequencyMap = new HashMap<>();
        for (int i = 0; i < n; i++) {
            num = arr[i];
            long d = 0, sum = 0;
            while (num > 0) {
                d = num % 10;
                sum = sum + d;
                num = num / 10;
                
            }
            frequencyMap.put(sum, frequencyMap.getOrDefault(sum, 0L) + 1L);
        }
        int count=frequencyMap.size();
        return count;
    }
}

Majority Vote

You are given a list of integers nums where each number represents a vote to a candidate. Return the ids of the candidates that have greater than n/3 votes, If there's not a majority vote, return -1

class Solution {
    public static ArrayList<Integer> Solve(int n, int[] nums) {
        int num1 = -1, num2 = -1, count1 = 0, count2 = 0;
    for(int i=0;i<n;i++)

{
            if(num1==nums[i]){
            count1++;
            }
            else if(num2==nums[i]){
            count2++;
            }
            else if(count1==0)
            {
            num1=nums[i];
            count1=1;
            }
            else if(count2==0)
            {
            num2=nums[i];
            count2=1;
                
            }
             else
             {
            count1--;
            count2--;
            }
}
         ArrayList < Integer > ans=new ArrayList<>();
          count1 = count2 = 0;
          for (int i = 0; i < n; i++) 
          {
                if (nums[i] == num1)
                  count1++;
                else if (nums[i] == num2)
                  count2++;
          }
          if (count1 > n / 3)
            ans.add(num1);
          if (count2 > n / 3)
            ans.add(num2);
    if(ans.size()==0)
    {
        ans.add(-1);
    }
return ans;
        
    }
}